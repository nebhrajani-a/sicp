#+title: MIT 6.001 1986 Video Notes
#+latex_class: org-report
#+latex_header: \usepackage{tikz-cd}
#+latex_header: \usepackage{parskip}
#+latex_header: \usepackage[type={CC}, modifier={by-nc}, version={3.0},]{doclicense}
#+latex_header: \usepackage{forest}
#+latex_class_options: [9pt]
#+latex_header:\usepackage{sectsty}
#+latex_header:\sectionfont{\fontsize{12}{15}\selectfont}
#+latex_header:\subsectionfont{\fontsize{11}{11}\selectfont}
#+latex_header: \setlength\parindent{0pt}
#+latex_header: \usepackage{parskip}
#+latex_header: \usepackage{pifont}
#+latex_header: \makeatletter
#+latex_header: \def\@makechapterhead#1{%
#+latex_header:  {\parindent \z@ \raggedright \normalfont
#+latex_header:    \ifnum \c@secnumdepth >\m@ne
#+latex_header:        \LARGE\bfseries \thechapter~
#+latex_header:    \fi
#+latex_header:    \interlinepenalty\@M
#+latex_header:    \LARGE \bfseries #1\par\nobreak
#+latex_header:    \vskip 10\p@
#+latex_header:  }}
#+latex_header:\def\@makeschapterhead#1{%
#+latex_header:  {\parindent \z@ \raggedright
#+latex_header:    \normalfont
#+latex_header:    \interlinepenalty\@M
#+latex_header:    \Huge \bfseries  #1\par\nobreak
#+latex_header:    \vskip 10\p@
#+latex_header:  }}
#+latex_header:\makeatother

* Introduction

** About
   These are my notes of the twenty SICP lectures of June 1986,
   produced by Hewlett-Packard Television. These videos are available
   under a Creative Commons license. These videos should be included in
   a directory called =./videos=.

   These notes aim to be concise and as example-heavy as possible. The
   language used and referred to as "Lisp" is MIT-Scheme. These notes,
   however, use the SICP language provided by Racket, a modern Scheme
   dialect. This is because Racket's integration with Emacs and
   =org-mode= is orders of magnitude better than MIT-Scheme's. In
   general, all "Lisp" code looks exactly the same as in SICP, with the
   exception of having to prefix some numbers with =#i= to ensure
   Racket treats them as imprecise.

** License
   \doclicenseThis

* Lecture 1A: Overview and Introduction to Lisp

  Computer science isn't really a science, and it isn't really about
  computers. Computer science is the study of how-to or imperative
  knowledge (as opposed to declarative knowledge). To illustrate the
  difference, consider:

  $$y = \sqrt{x} \mathrm{~such~that~} y^2=x, y \geq 0$$

  This is declarative, in that we could recognize if $y$ is the square
  root of $x$ given $x$ and $y$, but we're no closer to knowing how to
  /find/ $y$ if we are given $x$. Imperative knowledge would look
  like:

  To find the square root $y$ of $x$:
  - Make a guess $g$.
  - If $g^2$ is close enough to $x$, $y=g$.
  - Otherwise, make a new guess equal to the average of $g$ and $x/g$.

  This method will eventually come up with a $g$ close enough to the
  actual square root $y$ of $x$.

  Computer science focuses on this kind of imperative knowledge, and,
  specifically, how to communicate that knowledge to a computer.

** Managing Complexity: Key Ideas of 6.001
   Computer science is also about managing complexity, in that large
   programs that you can't hold in your head should still be manageable
   and easy to work with. We explore this theme in 6.001 by learning
   three key ideas:

   - Black-box abstractions
   - Conventional interfaces
   - Metalinguistic abstraction.


** Let's Learn Lisp
   When learning a new language, always ask about its:
   - Primitive elements,
   - Means of combination, and
   - Means of abstraction.

*** Primitive Elements
    These are numbers like 3, 17.4, or 5. Other primitives are
    discussed later in the course.

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      4
      17.4
      5
    #+END_SRC

    #+RESULTS:
    : 4
    : 17.4
    : 5

*** Means of Combination
    Lisp's numerical primitives can be combined with "operations" such
    as addition, written in prefix notation.

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (+ 3 17.4 5)
    #+END_SRC

    #+RESULTS:
    : 25.4

    Other basic operations are provided by Lisp, such as
    multiplication and division. Of course, combinations can be
    combined recursively:

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (+ 3 (* 5 6) 8 2)
    #+END_SRC

    #+RESULTS:
    : 43

    This should show you the tree structure inherent in all of Lisp:
    #+LATEX: \begin{center}
    #+LATEX: \begin{forest}
    #+LATEX: [+
    #+LATEX: [* [5] [6]] [8] [2]]
    #+LATEX: \end{forest}
    #+LATEX: \end{center}

    In Lisp, () is the application of an operation or function in
    prefix notation.

*** Means of Abstraction

    Abstraction can simply be done by naming things. Giving
    complicated things a name prevents us from having to understand
    how the thing the name refers to /works/, and instead lets us
    "abstractly" use the name for our purposes.

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define a (* 5 5))
      a
      (* a a)
      (define b (+ a (* 5 a)))
      b
      (+ a (/ b 5))
    #+END_SRC

    #+RESULTS:
    : 25
    : 625
    : 150
    : 55

    Now, it's often more useful to abstract away imperative how-to
    knowledge. Consider:

    #+NAME: square
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define (square x)
        (* x x))
    #+END_SRC

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<square>>
      (square 10)
    #+END_SRC

    #+RESULTS:
    : 100

    This defines =square= as a function taking a single argument =x=,
    and returning =(* x x)=. Note that this way of writing a define is
    actually "syntactic sugar" for:

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define square
        (lambda (x)
          (* x x)))

      (square 25)
    #+END_SRC

    #+RESULTS:
    : 625

    =lambda (x)= means "make a procedure that takes argument =x=". The
    second argument to lambda is the actual procedure body. The
    =define= names this anonymous procedure =square=.

    Just like we can use combinations recursively, so we can
    abstractions. Consider:

    #+NAME: average
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define (average x y)
        (/ (+ x y) 2))
    #+END_SRC

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<square>>
      <<average>>
      (define (mean-square x y)
        (average (square x)
                 (square y)))

      (mean-square 2 3)
    #+END_SRC

    #+RESULTS:
    : 13/2

    Note the indentation: since Lisp is parenthesis heavy, we use
    indentation. Good editors like Emacs should do this automatically.

** Case Analysis in Lisp

   To represent functions like:
   $$abs(x) = \begin{cases}
   -x & x<0\\
   0 & x = 0\\
   x & x > 0
   \end{cases}$$
   Lisp needs some form of conditional execution. In Lisp, this
   function would look like:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (abs x)
       (cond ((< x 0) (- x))
             ((= x 0) 0)
             ((> x 0) x)))
     (abs -3)
     (abs 0)
     (abs 5)
   #+END_SRC

   #+RESULTS:
   : 3
   : 0
   : 5

   =cond= takes any number of arguments. Each argument must be
   structured as =(predicate) (consequent)=. If =predicate= is true,
   we do the =consequent=. Otherwise, we don't. Lisp also provides a
   way to write conditionals that only have two branches (an if-else):

   #+NAME: abs
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (abs x)
       (if (< x 0)
           (- x)
           x))
   #+END_SRC

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<abs>>
     (abs -11)
     (abs 0)
     (abs 33)
   #+END_SRC

   #+RESULTS:
   : 11
   : 0
   : 33

   =cond= and =if= are syntactical sugar for each other. The Lisp
   implementation picks any one and defines the other in terms of it.

   We now know most of Lisp. Lisp doesn't have =do...while= or =for=,
   since anything a loop can do can be done via recursion.

** Finding Square Roots

   Remember our square root finding algorithm?

   To find the square root $y$ of $x$:
   - Make a guess $g$.
   - If $g^2$ is close enough to $x$, $y=g$.
   - Otherwise, make a new guess equal to the average of $g$ and
     $x/g$.

   Or, in Lisp,

   #+NAME: try
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (try g x)
       (if (good-enough-p g x)
           g
           (try (improve g x) x)))
   #+END_SRC

   This is a form of programming called "wishful thinking": we assume
   =good-enough-p= (good enough predicate) and =improve= are already
   implemented. Now that we can try a guess and improve it till it's
   good enough, we can write a simple square root function:

   #+NAME: sqrt
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (sqrt x)
       (try 1 x))
   #+END_SRC

   This function simply starts the guess at 1, then improves it. Let's
   now write the functions we don't have:

   #+NAME: improve
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (improve g x)
       (average g (/ x g)))
   #+END_SRC

   #+NAME: good-enough-p
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (good-enough-p g x)
       (< (abs (- (square g) x))
          0.00001))
   #+END_SRC

   This tests if $g^2$ is within 0.0001 of $x$. Putting it all
   together, we can finally try to find square roots:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<square>>
     <<average>>
     <<abs>>
     <<improve>>
     <<good-enough-p>>
     <<try>>
     <<sqrt>>
     (sqrt #i2)
     (sqrt #i3)
     (sqrt #i4)
   #+END_SRC

   #+RESULTS:
   : 1.4142156862745097
   : 1.7320508100147274
   : 2.0000000929222947

   #+begin_quote
   *Note:* The =#i4= is Racket's syntax for using imprecise
   (decimals) instead of precise (fractions). Ignore it, and treat it
   as the number =4=.
   #+end_quote

   See that =try= actually runs a loop, but does so recursively,
   calling itself every time the =if= condition fails to improve the
   guess. Also note that these functions can all be nested inside the
   square root function to hide them from the outer scope, thus:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (sqrt x)
       (define (good-enough-p g)
         (define (square g)
           (* g g))
         (define (abs y)
           (if (< y 0)
               (- y)
               y))
         (< (abs (- (square g) x))
            0.0001))
       (define (improve g)
         (define (average y z)
           (/ (+ y z) 2))
         (average g (/ x g)))
       (define (try g)
         (if (good-enough-p g)
             g
             (try (improve g))))
       (try 1))

     (sqrt #i2)
   #+END_SRC

   #+RESULTS:
   : 1.4142156862745097

   This program should also show you a tree-like dependency of the
   functions, with each function containing the definitions of the
   functions it depends on. For someone using =sqrt=, all the functions
   within it are hidden.

   #+LATEX: \begin{center}
   #+LATEX: \begin{forest}
   #+LATEX: [\texttt{sqrt}
   #+LATEX: [\texttt{try}
   #+LATEX: [\texttt{good-enough-p}
   #+LATEX: [\texttt{abs}] [\texttt{square}]]
   #+LATEX: [\texttt{improve}
   #+LATEX: [\texttt{average}]]
   #+LATEX: [\texttt{try}]]]
   #+LATEX: \end{forest}
   #+LATEX: \end{center}

   This discipline of writing procedures is called lexical scoping.


** Inbuilt/Primitive Procedures Aren't Special

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<square>>
     square
     +
   #+END_SRC

   #+RESULTS:
   : #<procedure:square>
   : #<procedure:+>

* Lecture 1B: Procedures and Processes, Substitution Model

** Substitution Rule/Model
   The substitution rule states that,

   #+begin_quote
   To evaluate an application:
   - Evaluate the operator to get procedure.
   - Evaluate the operands to get arguments.
   - Apply procedure to arguments.
     - Copy body of procedure.
     - Replace formal parameters with actual arguments.
   - Evaluate new body.
   #+end_quote

   Note that this isn't necessarily how the /interpreter/ evaluates a
   Lisp application, but the substitution rule is a "good enough"
   model for our purposes.

*** Kinds of Expressions in Lisp
    - Numbers (evaluate to "themselves")
    - Symbols (represent some procedure)
    - Combinations
    - \lambda-expressions (used to build procedures)
    - Definitions (used to name symbols)
    - Conditionals

    We will focus our use of the substitution rule on the first three.
    The last three are called "special forms", and we'll worry about
    them later.

*** Example

    Consider:

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<square>>
      (define (sum-of-squares x y)
        (+ (square x) (square y)))

      (sum-of-squares 3 4)
    #+END_SRC

    #+RESULTS:
    : 25

    Let's try to apply the substitution rule to our application,

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (sum-of-squares 3 4)
      (+ (square 3) (square 4))
      (+ (square 3) (* 4 4))
      (+ (square 3) 16)
      (+ (* 3 3) 16)
      (+ 9 16)
      25
    #+END_SRC

** Peano Arithmetic

*** Simple Peano Addition
    Peano arithmetic defines addition as:

    #+NAME: peano-a
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      (define (pa+ x y)
        (if (= x 0)
            y
            (pa+ (dec x) (inc y))))
    #+END_SRC

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<peano-a>>
      (pa+ 3 4)
    #+END_SRC

    #+RESULTS:
    : 7

    Assume that =inc= and =dec= are primitives available that increment
    and decrement the argument respectively. How is the procedure =pa+=
    working? Let's apply the substitution rule.

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (pa+ 3 4)
      (if (= 3 0)
          4
          (pa+ (dec 3) (inc 4)))
      (pa+ 2 5)
      ...
      (pa+ 1 6)
      ...
      (pa+ 0 7)
      7
    #+END_SRC

    We're skipping some steps, but the idea is that =x= keeps giving
    one "unit" to =y= until it reaches zero. Then the sum is =y=.
    Written with steps skipped:

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (pa+ 3 4)
      (pa+ 2 5)
      (pa+ 1 6)
      (pa+ 0 7)
      7
    #+END_SRC

*** Another Peano Adder
    Consider:
    #+NAME: peano-b
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      (define (pb+ x y)
        (if (= x 0)
            y
            (inc (pb+ (dec x) y))))
    #+END_SRC


    This is also a Peano adder: but it's implemented /slightly/
    differently syntax-wise, a few characters here and there. Let's
    use the substitution rule to see how it works.

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (pb+ 3 4)
      (inc (pb+ 2 4))
      (inc (inc (pb+ 1 4)))
      (inc (inc (inc (pb+ 0 4))))
      (inc (inc ((inc 4))))
      (inc (inc 5))
      (inc 6)
      7
    #+END_SRC

    See that it /does/ work:

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<peano-b>>
      (pb+ 3 4)
    #+END_SRC

    #+RESULTS:
    : 7

    Now, consider how these two, =pa+= and =pb+=, are different. While
    the /procedures/ do the same thing, the processes are wildly
    different. Let's discuss their time and space complexity.
    It should be obvious to you that the time complexity is the
    vertical axis in the substitution rule application, since the
    interpreter "executes" these instructions line by line. More lines
    means more time.

    In the case of =pa+=, the number of lines increases by 1 if you
    increase input =x= by 1. Thus, the time complexity is $O(x)$.
    Similarly, in the case of =pb+=, the number of lines increases by
    2 (once in the expansion, once in the contraction) when you
    increase =x= by 1. Thus, it is also $O(x)$.

    Now, the horizontal axis shows us how much space is being used. In
    the case of =pa+=, the space used is a constant. Thus, $O(1)$. On
    the other hand, see that =pb+= first /expands/ then /contracts/.
    The length of the maximum expansion increases by 1 if we increase
    $x$ by 1, since there's one more increment to do. Thus, $O(x)$.

    Now, we call a process like =pa+= /linear iterative/ and a process
    like =pb+= /linear recursive/.

    #+ATTR_LATEX: :booktabs t :align lccl
    | Process | Time Complexity | Space Complexity | Type             |
    |---------+-----------------+------------------+------------------|
    | =pa+=   | $O(x)$          | $O(1)$           | Linear iterative |
    | =pb+=   | $O(x)$          | $O(x)$           | Linear recursive |

    Note that the /process/ =pa+= being iterative has nothing to do
    with the implementation/definition of the /procedure/, which is
    recursive. Iteration refers to the constant space requirement.

** Differentiating Between Iterative and Recursive Processes

   One of the primary ways to differentiate between an iterative and
   recursive process is to imagine what'd happen if you turned the
   computer off, then resumed the current computation.

   In a recursive process, we've lost some important information: how
   deep into the recursion we are. In the =pb+= example, we wouldn't
   know how many =inc='s deep we are (information stored in the RAM by
   the interpreter, not by the process), meaning that we can't return
   the right value.

   In an iterative process, we can pick up right where we left off,
   since /all/ state information is contained by the process.

** Fibonacci Numbers

   Fibonacci numbers are defined as:

   $$F(x) =
   \begin{cases}
   0, & x = 0\\
   1, & x = 1\\
   F(x-1) + F(x-2), & \mathrm{otherwise}
   \end{cases}$$

   The series itself is:
   $$0,1,1,2,3,5,8,13,21,34,55\hdots$$

   Let's write a Lisp function to calculate the $n\mathrm{th}$ Fibonacci
   number, assuming 0 is the 0th.

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (fib n)
       (if (< n 2)
           n
           (+ (fib (- n 1))
              (fib (- n 2)))))
     (fib 10)
   #+END_SRC

   #+RESULTS:
   : 55

   It works, that's true. But how /well/ does it work. Let's see. When
   we call (say) =(fib 4)=, we also call =(fib 3)= and =(fib 2)=, both
   of which also call $\hdots$ let's draw it:

   #+LATEX: \begin{center}
   #+LATEX: \begin{forest}
   #+LATEX: [\texttt{(fib 4)}
   #+LATEX: [\texttt{(fib 3)}
   #+LATEX: [\texttt{(fib 2)} [\texttt{(fib 1)} [1]] [\texttt{(fib 0)} [0]]]
   #+LATEX: [\texttt{(fib 1)} [1]]]
   #+LATEX: [\texttt{(fib 2)} [\texttt{(fib 1)} [1]] [\texttt{(fib 0)} [0]]]]
   #+LATEX: \end{forest}
   #+LATEX: \end{center}

   A tree! Clearly, this is an exponential-time process, since
   computing $n+1$ takes exponentially more effort. Also note that
   it's a pretty bad process, since we constantly recompute many
   values. The space complexity is the maximum depth of the tree
   (depth of recursion), which is at most $n$. Therefore, the time
   complexity is $O(\mathrm{fib}(n))$ and space complexity is $O(n)$.

   It is useful to try and write an iterative Fibonacci with better
   performance as an exercise.

** Towers of Hanoi

   From Wikipedia:

   #+begin_quote
   The Tower of Hanoi is a mathematical game or puzzle. It consists of
   three rods and a number of disks of different diameters, which can
   slide onto any rod. The puzzle starts with the disks stacked on one
   rod in order of decreasing size, the smallest at the top, thus
   approximating a conical shape. The objective of the puzzle is to
   move the entire stack to the last rod, obeying the following simple
   rules:

   - Only one disk may be moved at a time.
   - Each move consists of taking the upper disk from one of the
     stacks and placing it on top of another stack or an empty rod.
   - No disk may be placed on top of a disk that is smaller than it.
   #+end_quote

   Let's try to solve Hanoi for 4 disks, from rod A to rod C. Again
   --- "wishful thinking". Let's assume that we know how to solve for
   3 disks. To solve, we'd take the top 3 disks, put it on the spare
   rod B. Then, we'd take the fourth and largest disk, and put it on
   destination rod C. Finally, we'd move the three disk pile from B
   to C. Solved!

   But wait --- to solve the 3 disk case, let's assume we know how to
   solve the 2 disk case.

   To solve the 2 disk case, we should know how
   to solve the one disk case, which is just moving a disk from a rod
   to another.

   Or, in Lisp,

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (move n from to spare)
       (cond ((= n 1) (display "Move disk at rod ")
                      (display from)
                      (display " to rod ")
                      (display to)
                      (display ".\n"))
             (else
              (move (- n 1) from spare to)
              (move 1 from to spare)
              (move (- n 1) spare to from))))

     (move 4 "A" "C" "B")
   #+END_SRC

   #+RESULTS:
   #+begin_example
   Move disk at rod A to rod B.
   Move disk at rod A to rod C.
   Move disk at rod B to rod C.
   Move disk at rod A to rod B.
   Move disk at rod C to rod A.
   Move disk at rod C to rod B.
   Move disk at rod A to rod B.
   Move disk at rod A to rod C.
   Move disk at rod B to rod C.
   Move disk at rod B to rod A.
   Move disk at rod C to rod A.
   Move disk at rod B to rod C.
   Move disk at rod A to rod B.
   Move disk at rod A to rod C.
   Move disk at rod B to rod C.
   #+end_example

   Note, of course, that this procedure too, is an exponential time
   procedure. However, any procedure for Hanoi will be exponential
   time, since for $n$ disks, Hanoi requires $2^{n-1}$ moves. Even if
   you compute every move in $O(1)$ (which we do, since it's just a
   print), the complexity will be $O(2^n)$.

** Iterative Fibonacci

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (iter-fib n a b)
       (if (= n 1)
           b
           (iter-fib (dec n) b (+ a b))))

     (define (fib n)
       (iter-fib n 0 1))

     (fib 10)
   #+END_SRC

   #+RESULTS:
   : 55

* Lecture 2A: Higher-Order Procedures

** Abstracting Procedural Ideas

   Consider the functions and their respective (recursive) procedures:

   $$\sum_{i=a}^{b} i$$

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (sum-int a b)
       (if (> a b)
           0
           (+ a
              (sum-int (inc a) b))))

     (sum-int 0 10)
   #+END_SRC

   #+RESULTS:
   : 55

   $$\sum_{i=a}^{b} i^{2}$$

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<square>>
     (define (sum-sq a b)
       (if (> a b)
           0
           (+ (square a)
              (sum-sq (inc a) b))))

     (sum-sq 0 4)
   #+END_SRC

   #+RESULTS:
   : 30

   $$\sum_{i=a_{\mathrm{~by~}4}}^{b} \frac{1}{i(i+2)}$$

   Note that this series estimates $\pi /8$.

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (sum-pi a b)
       (if (> a b)
           0
           (+ (/ 1
                 (* a (+ a 2)))
              (sum-pi (+ a 4) b))))

     (* 8 (sum-pi #i1 #i1000000))
   #+END_SRC

   #+RESULTS:
   : 3.141590653589793


   See that the commonality between these procedures comes from the
   fact that the notion of "summation" from =a= to =b= is the same,
   but the /function/ being summed is different in each case. Or, in
   general form:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (<name> a b)
       (if (> a b)
           0
           (+ (<term> a)
              (<name> (<next> a) b))))
   #+END_SRC

   The way to solve this is by writing a procedure =sum=, which has
   available to it two procedures =term= and =next=. We supply these
   are arguments. Consider:

   #+NAME: sum
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (sum term a next b)
       (if (> a b)
           0
           (+ (term a)
              (sum term (next a) next b))))
   #+END_SRC

   When we call =sum= recursively, see that we pass to it the /same
   procedures/ =term= and =next=, along with =b= and the next value of
   =a=. Now, it is easy to define =sum-int=, =sum-sq=, and =sum-pi=
   using =sum=, thus:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<sum>>
     (define (sum-int a b)
       (define (identity x) x)
       (sum identity
            a
            inc
            b))

     (sum-int 0 10)
   #+END_SRC

   #+RESULTS:
   : 55

   =identity= is the function $p(x) = x$.

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<sum>>
     <<square>>
     (define (sum-sq a b)
       (sum square
            a
            inc
            b))

     (sum-sq 0 4)
   #+END_SRC

   #+RESULTS:
   : 30

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<sum>>
     (define (sum-pi a b)
       (sum (lambda (x)
              (/ 1
                 (* x (+ x 2))))
            a
            (lambda (x) (+ x 4))
            b))

     (* 8 (sum-pi #i1 #i1000000))
   #+END_SRC

   #+RESULTS:
   : 3.141590653589793

   Recall that =lambda= means "make a procedure" that is nameless. In
   =sum-pi=, we choose to give it anonymous functions as arguments
   instead of defining our own, because there's no reason to name a
   procedure we won't later use.

   The big advantage of abstracting away =sum= this way is that in
   case we want to implement it in a different way, we merely have to
   change the implementation of one function (=sum=) and not that of
   the three functions that use it. In fact, those functions can
   remain exactly the same.

   Here's another implementation of =sum=. See that =sum-pi= still
   works without changes, because it doesn't care about how =sum= is
   implemented as long as the argument number and order remains
   constant.

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (sum term a next b)
       (define (iter j ans)
         (if (> j b)
             ans
             (iter (next j)
                   (+ (term j)
                      ans))))
       (iter a 0))

     (define (sum-pi a b)
       (sum (lambda (x)
              (/ 1
                 (* x (+ x 2))))
            a
            (lambda (x) (+ x 4))
            b))

     (* 8 (sum-pi #i1 #i1000000))
   #+END_SRC

   #+RESULTS:
   : 3.1415906535898936

** More on Square Roots

   Recall our square root procedure. When seen in Lisp code, it's not
   very clear what it's doing, or how it's working.

   #+NAME: no-dep-sqrt
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (sqrt x)
       (define (good-enough-p g)
         (define (square g)
           (* g g))
         (define (abs y)
           (if (< y 0)
               (- y)
               y))
         (< (abs (- (square g) x))
            0.0001))
       (define (improve g)
         (define (average y z)
           (/ (+ y z) 2))
         (average g (/ x g)))
       (define (try g)
         (if (good-enough-p g)
             g
             (try (improve g))))
       (try 1))
   #+END_SRC

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<no-dep-sqrt>>
     (sqrt #i2)
   #+END_SRC

   #+RESULTS:
   : 1.4142156862745097

   Let's use higher-order procedure abstraction to make it clearer.

*** Fixed Points

    Recall that the algorithm itself relies on writing a function

    $$f\colon y\mapsto \frac{y+\frac{x}{y}}{2}$$

    Note that this works because $f(\sqrt{x}) = \sqrt{x}$:

    $$f(\sqrt{x})=\frac{\sqrt{x}+\frac{x}{\sqrt{x}}}{2} = \frac{2\sqrt{x}}{2} = \sqrt{x}$$

    See that this is /actually/ an algorithm for finding a fixed point
    of a function $f$, which is defined as finding the point where
    $f(z)=z$. This algorithm is merely an instance of a function $f$
    whose fixed point happens to be the square root.

    #+begin_quote
    For some functions, the fixed point can be found by iterating it.
    #+end_quote

    This is the top-level abstraction we'll write a function for.
    First, let's see how we'd write a square-root function by wishful
    thinking:

    #+NAME: fp-sqrt
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<average>>
      (define (sqrt x)
        (fixed-point
         (lambda (y) (average (/ x y)
                              y))
         1))
    #+END_SRC

    Now writing =fixed-point=:

    #+NAME: fixed-point
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<abs>>
      (define (fixed-point f start)
        (define (close-enough-p x y)
          (< (abs (- x y))
             0.00001))
        (define (iter old new)
          (if (close-enough-p old new)
              new
              (iter new (f new))))
        (iter start (f start)))
    #+END_SRC

    Let's try it out!

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<fixed-point>>
      <<fp-sqrt>>
      (sqrt #i2)
    #+END_SRC

    #+RESULTS:
    : 1.4142135623746899

*** Damping Oscillations

    A fair question when seeing the function
    $$f_1\colon y\mapsto \frac{y+\frac{x}{y}}{2}$$
    is why another function
    $$f\colon y\mapsto \frac{x}{y}$$
    wouldn't work in its place. It's a fair question, and is best
    answered by trying to find its fixed point by iteration. Let's try
    to find it for $x=2$, starting at $y=1$. Then,

    $$f(1) = \frac{2}{1} = 2$$
    $$f(2) = \frac{2}{2} = 1$$
    $$f(1) = \frac{2}{1} = 2$$
    $$f(2) = \frac{2}{2} = 1$$
    $$~\hdots$$

    It seems that instead of converging, this function is
    /oscillating/ between two values. We know that it's easy to fix
    this: we have to damp these oscillations. The most natural way to
    do this is to take the average of successive values $y$ and
    $f(y)$. A =sqrt= function that uses average damping would be:

    #+NAME: fp-avg-sqrt
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<fixed-point>>
      (define (sqrt x)
        (fixed-point
         (avg-damp (lambda (y) (/ x y)))
         1))
    #+END_SRC

    The =avg-damp= function takes in a procedure, creates an average damping
    procedure, and returns it. Or, in Lisp:

    #+NAME: avg-damp
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<average>>
      (define avg-damp
        (lambda (f)
          (lambda (x) (average (f x) x))))
    #+END_SRC

    It is worth discussing how =avg-damp= works. It is defined as a
    procedure which takes the argument of a function =f=. It then
    returns an anonymous procedure which takes an argument =x=, and
    computes the average of $f(x)$ and $x$. This is finally the
    highest level of abstraction we can reach for the =sqrt=
    algorithm --- finding the fixed point of a damped oscillating
    function.

    Using the =sqrt= function,

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<avg-damp>>
      <<fp-avg-sqrt>>
      (sqrt #i2)
    #+END_SRC

    #+RESULTS:
    : 1.4142135623746899

** Newton's Method

   Newton's method is used to find the zeros of a function ($y \ni
   f(y)=0$). To use it, start with some guess $y_0$. Then,

   $$y_{n+1} = y_n - \frac{f(y_n)}{f'(y_n)}$$

   where $$f'(y) = \frac{\mathrm{d}f(y)}{\mathrm{d}y}$$

   We can, of course, find the zero of the square root finding function
   $f(y) =  x-y^2$ using Newton's method. Note that Newton's method
   /itself/ is based on fixed points, since it aims to find a fixed
   point where $y_{n+1}\approx y_n$.

   Defining =sqrt=:

   #+NAME: newton-sqrt
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<square>>
     (define (sqrt x)
       (newton (lambda (y) (- x (square y)))
               1))
   #+END_SRC

   We pass to =newton= a function $f(y)=x-y^2$, since its zero is $x=y^2$.

   #+NAME: newton
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<fixed-point>>
     (define (newton f guess)
       (define df (deriv f))
       (fixed-point
        (lambda (x) (- x
                       (/ (f x)
                          (df x))))
        guess))
   #+END_SRC


   It is important to note that defining =df= to be =(deriv f)= once
   prevents wasteful recomputation of =df= every time =fixed-point=
   calls itself.

   Of course, we now have to define a derivative function. We can
   simply use the standard limit definition to find it numerically:

   $$f'(x) = \lim_{\Delta x\to 0} \frac{f(x+\Delta x) - f(x)}{\Delta
   x}$$

   Or, in Lisp,

   #+NAME: deriv
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define dx 0.0000001)

     (define deriv
       (lambda (f)
         (lambda (x)
           (/ (- (f (+ x dx))
                 (f x))
              dx))))


   #+END_SRC

   This function returns a function which is the derivative of =f=,
   and can be used as such. Consider:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<deriv>>
     ((deriv (lambda (x) (* x x x))) 2)
   #+END_SRC

   #+RESULTS:
   : 12.000000584322379

   Which is the expected value of differentiating $x^{3}$ w.r.t $x$
   ($3x^2$) and evaluating at 2.

   Testing out our =sqrt= function:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<deriv>>
     <<newton>>
     <<newton-sqrt>>
     (sqrt #i2)
   #+END_SRC

   #+RESULTS:
   : 1.4142135623747674

** Procedures are First-Class Citizens

   This means that procedures can be:
   - Named using variables.
   - Passed as arguments to procedures.
   - Returned as values from procedures.
   - Included in data structures.

* Lecture 2B: Compound Data

  Consider our =sqrt= function that uses =good-enough-p=. What we did
  while writing =sqrt= is assume the existence of =good-enough-p=.
  That is, we divorced the task of building =sqrt= from the task of
  implementing its parts.

  Let's do this for data.

** Rational Number Arithmetic

   Let's design a system which can add fractions:
   $$\frac{1}{2}+\frac{1}{4}=\frac{3}{4}$$
   and multiply them:
   $$\frac{3}{4}\times \frac{2}{3} = \frac{1}{2}$$

   The /procedures/ for these two tasks are well known to most people:

   $$\frac{n_1}{d_1} + \frac{n_2}{d_2} = \frac{n_1d_2+n_2d_2}{d_1d_2}$$
   and
   $$\frac{n_1}{d_1} \times \frac{n_2}{d_2} = \frac{n_1n_2}{d_1d_2}$$

*** Abstraction
    We don't know, however, how to represent this data in a Lisp
    procedure. Let's use our powerful "wishful thinking" strategy.
    Assume that we have the following procedures available to us:

    - A constructor =(make-rat n d)= which makes a fraction with
      numerator =n= and denominator =d=.
    - Two selectors:
      - =(numer x)= which takes in a fraction =x= and returns its
        numerator.
      - =(denom x)= which takes in a fraction =x= and returns its
        denominator.

    Then, our procedures are easy to write:

    #+NAME: frac-proc
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define (+rat x y)
        (make-rat
         (+ (* (numer x) (denom y))
            (* (numer y) (denom x)))
         (* (denom x) (denom y))))

      (define (*rat x y)
        (make-rat
         (* (numer x) (numer y))
         (* (denom x) (denom y))))
    #+END_SRC

    Why do we need this data object abstraction anyway? We could very
    well define =+rat= to take in four numbers, two numerators and two
    denominators. But to return, we can't return /both/ numerator and
    denominator. We now have to define two summation functions, one for
    the numerator and one for the denominator, and somehow keep track
    of the fact that one of these number is the numerator and the other
    the denominator. Furthermore, when applying more complex operations
    like:

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (*rat (+rat x y)
            (+rat s t))
    #+END_SRC

    The data abstraction helps. If it weren't there, we'd have to
    maintain some temporary registers to store the numerator and
    denominator values of the =+rat= operations into, then pass them to
    =*rat=.

    Worse than confusing the program, such a design philosophy would
    confuse us, the programmers.

*** Data Object Creation

    The glue we use to stick two numbers together is provided by three
    Lisp primitives:
    - A constructor =cons=, which generates an ordered pair.
    - Two selectors:
      - =car=, which selects the first element of the pair, and
      - =cdr=, which selects the second element of the pair.

    In use,
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define x (cons 1 2))
      (car x)
      (cdr x)
    #+END_SRC

    #+RESULTS:
    : 1
    : 2

    We can now write the procedures that we'd deferred writing
    earlier:

    #+NAME: make-rat
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define (make-rat x y)
        (cons x y))

      (define (numer x)
        (car x))

      (define (denom x)
        (cdr x))
    #+END_SRC

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<frac-proc>>
      <<make-rat>>

      (define x (make-rat 1 2))
      (define y (make-rat 1 4))
      (define z (+rat x y))
      (numer z)
      (denom z)
    #+END_SRC

    #+RESULTS:
    : 6
    : 8

    Agh. We forgot to reduce results to the simplest form. We can
    easily include this in the =make-rat= procedure:[fn:1]

    #+NAME: make-rat-gcd
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define (make-rat x y)
        (let ((g (gcd x y)))
          (cons (/ x g)
                (/ y g))))

      (define (numer x)
        (car x))

      (define (denom x)
        (cdr x))
    #+END_SRC

    Note that we could shift the =gcd= bit to functions =numer= and
    =denom=, which would display the simplest form at access time
    rather than creation time. Deciding between the two is a matter of
    system efficiency: a system which displays often should use
    creation time simplification, while a system which creates many
    fractions should use access time simplification.
    We now need a GCD function:

    #+NAME: gcd
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define (gcd a b)
        (if (= b 0)
            a
            (gcd b (remainder a b))))
    #+END_SRC

    We can now use =+rat= in /exactly/ the same way, since the
    interface is the same. This is the advantage of abstraction.

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<make-rat-gcd>>
      <<frac-proc>>

      (define x (make-rat 1 2))
      (define y (make-rat 1 4))
      (define z (+rat x y))
      (numer z)
      (denom z)
    #+END_SRC

    #+RESULTS:
    : 3
    : 4

    Excellent: we now have a working system. The data abstraction
    model can be visualised as follows:

    #+begin_center
    \rule{6cm}{2pt}\\
    =+rat=, =*rat= ...\\
    \rule{6cm}{2pt}\\
    =make-rat=, =numer=, =denom=\\
    \rule{6cm}{2pt}\\
    =gcd=\\
    \rule{6cm}{2pt}\\
    Pairs\\
    \rule{6cm}{2pt}
    #+end_center

    At each layer of abstraction, we merely care about the usage of
    the lower layers and not their implementation or underlying
    representation.

** Representing Points on a Plane

   This is now an easy problem --- the code should be
   self-explanatory.

   #+NAME: make-vec
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (make-vec x y)
       (cons x y))

     (define (xcor v)
       (car v))

     (define (ycor v)
       (cdr v))
   #+END_SRC

   We could now define a segment as a pair of vectors:

   #+NAME: make-seg
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (make-seg v w)
       (cons v w))

     (define (seg-start s)
       (car s))

     (define (seg-end s)
       (cdr s))
   #+END_SRC

   Some sample operations:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<average>>
     <<square>>
     <<no-dep-sqrt>>
     <<make-vec>>
     <<make-seg>>

     (define (midpoint s)
       (let ((a (seg-start s))
             (b (seg-end s)))
         (make-vec
          (average (xcor a) (xcor b))
          (average (ycor a) (ycor b)))))

     (define (length s)
       (let ((dx (- (xcor (seg-end s))
                    (xcor (seg-start s))))
             (dy (- (ycor (seg-end s))
                    (ycor (seg-start s)))))
         (sqrt (+ (square dx)
                  (square dy)))))

     (define side-a (make-vec #i3 #i0))
     (define side-b (make-vec #i0 #i4))
     (define segment (make-seg side-a side-b))

     (length segment)

     (define mp (midpoint segment))

     (xcor mp)
     (ycor mp)
   #+END_SRC

   #+RESULTS:
   : 5.000000000053722
   : 1.5
   : 2.0

   The abstraction layer diagram of this code is:
   #+begin_center
   \rule{6cm}{2pt}\\
   Segments\\
   \rule{6cm}{2pt}\\
   Vectors\\
   \rule{6cm}{2pt}\\
   Pairs\\
   \rule{6cm}{2pt}
   #+end_center

   It is interesting to note that segments are pairs of vectors,
   which are pairs of numbers, so segments are actually pairs of
   pairs. Represented as a tree:

   #+LATEX: \begin{center}
   #+LATEX: \begin{forest}
   #+LATEX: [$s$ [$\vec{v_{1}}$ [$x_{1}$] [$y_{1}$]] [$\vec{v_{2}}$ [$x_2$] [$y_2$]]]
   #+LATEX: \end{forest}
   #+LATEX: \end{center}

   This property is called /closure/ (from abstract algebra[fn:2]): that means
   of combination can be nested recursively. It's an important and
   powerful technique.

   For instance, a three-dimensional vector can be represented by a
   pair whose one element is a number and whose other element is a
   pair of numbers. Or, in Lisp:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define three-d-vec (cons 3 (cons 4 5)))
     (car three-d-vec)
     (car (cdr three-d-vec))
     (cdr (cdr three-d-vec))
   #+END_SRC

   #+RESULTS:
   : 3
   : 4
   : 5

** Pairs

   Let's go back to when we assumed that =make-rat=, =numer=, and
   =denom=, were already implemented. The procedures we then wrote
   were written using /abstract data/, with the only "assured"
   property being that:

   #+begin_verse
   =if x = (make-rat n d):=

     $\displaystyle \frac{\mathtt{numer~x}}{\mathtt{denom~x}} = \frac{\mathtt{n}}{\mathtt{d}}$
   #+end_verse

   Beyond this basic "spec", or the interface contract, we know
   nothing about its implementation.

   Now, it's easy not to appreciate how knowing /merely/ the
   specification of the layer below is sufficient to use it, so let's
   discuss how pairs work. When we wanted to implement =make-rat=, we
   kind of "cheated" in that we said, "Okay, Lisp has a primitive to
   do this so we don't have to implement a pair." Let's now take a
   look at a possible implementation of a pair that doesn't use data
   objects at all, and instead mimics them from thin air. Consider:

   #+NAME: our-cons
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (our-cons a b)
       (lambda (pick)
         (cond ((= pick 1) a)
               ((= pick 2) b))))

     (define (our-car x) (x 1))
     (define (our-cdr x) (x 2))
   #+END_SRC

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<our-cons>>
     (define pair (our-cons 3 4))
     (our-car pair)
     (our-cdr pair)
   #+END_SRC

   #+RESULTS:
   : 3
   : 4

   Before thinking about how it works: consider the fact that Lisp's
   pairs could be implemented this way, and not only would we not know
   about this while implementing =make-rat= --- we wouldn't care,
   since it's below the level of abstraction we're working at. As long
   as it behaves the way we expect it to --- that is, it follows the
   "spec", we don't know or care about its implementation[fn:3]. Such is the
   power of abstraction.

   Now, how is this implementation even working? Well:
   - =cons= is a procedure that returns a lambda (anonymous procedure)
     which, by the substitution model, looks like:
     #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
       (lambda (pick)
         (cond ((= pick 1) 3)
               ((= pick 2) 4)))
     #+END_SRC
   - =car= expects this procedure as an input, and returns the result of
     supplying this procedure with the value 1. This is naturally the
     first of the two numbers given to =cons= (=a=).
   - =cdr= is identical to =car=, except that /it/ supplies the input
     procedure with argument 2 to get =b=.

   We can thus implement a pair "data structure" using only lambdas.
   In fact, these pairs are closed:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<our-cons>>
     (define three-d-vec (our-cons 3 (our-cons 4 5)))
     (our-car three-d-vec)
     (our-car (our-cdr three-d-vec))
     (our-cdr (our-cdr three-d-vec))
     (our-cdr three-d-vec)
   #+END_SRC

   #+RESULTS:
   : 3
   : 4
   : 5
   : #<procedure:...6f_i/ob-2136OZJ.rkt:4:2>

   It is worth thinking about the structure of =three-d-vec=:
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (lambda (pick)
       (cond ((= pick 1) 3)
             ((= pick 2) (lambda (pick)
                           (cond ((= pick 1) 4)
                                 ((= pick 2) 5))))))
   #+END_SRC

   Picking =2= in the top-level lambda gives us another lambda, in
   which we can pick either the first number (4) or the second (5).
   Note that this is precisely the nested pair structure we were going
   for.

   #+LATEX: \begin{center}
   #+LATEX: \begin{forest}
   #+LATEX: [$\lambda$(p) [3] [$\lambda$(p) [4] [5]]]
   #+LATEX: \end{forest}
   #+LATEX: \end{center}

* Lecture 3A: Henderson Escher Example

  Recall our vector procedures:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (make-vec x y)
       (cons x y))

     (define (xcor v)
       (car v))

     (define (ycor v)
       (cdr v))
   #+END_SRC

   We could define more procedures using these:

   #+NAME: vec-proc
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (+vect v1 v2)
       (make-vec
        (+ (xcor v1) (xcor v2))
        (+ (ycor v1) (ycor v2))))

     (define (scale v s)
       (make-vec
        (* s (xcor v))
        (* s (ycor v))))
   #+END_SRC

   Recall that our representation of a line segment was as a pair of
   vectors, or pair of pairs. That is, we can use the property of
   closure that pairs have to store any amount of data.

** Lists
   Often, we want to store a sequence of data. Using pairs, there are
   many ways to do this, for instance:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (cons (cons 1 2) (cons 3 4))
     (cons (cons 1 (cons 2 3)) 4)
   #+END_SRC

   #+RESULTS:
   : ((1 . 2) 3 . 4)
   : ((1 2 . 3) . 4)

   However, we want to establish a conventional way of dealing with
   sequences, to prevent having to make ad-hoc choices. Lisp uses a
   representation called a list:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (cons 1 (cons 2 (cons 3 (cons 4 nil))))
   #+END_SRC

   #+RESULTS:
   : (1 2 3 4)

   Note that the =nil= represents the null or empty list. Since
   writing so many =cons= is painful, Lisp provides the primitive
   =list= which lets us build such a structure.

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (list 1 2 3 4)
   #+END_SRC

   #+RESULTS:
   : (1 2 3 4)

   Note that =list= is merely syntactic sugar for building up using
   pairs:

   #+NAME: one-to-four
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define one-to-four (list 1 2 3 4))
   #+END_SRC

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
     <<one-to-four>>
     (car one-to-four)
     (cdr one-to-four)
     (car (cdr one-to-four))
     (cdr (cdr one-to-four))
     (car (cdr (cdr (cdr one-to-four))))
     (cdr (cdr (cdr (cdr one-to-four))))
   #+END_SRC

   #+RESULTS:
   : 1
   : (2 3 4)
   : 2
   : (3 4)
   : 4
   : ()

   Note that the empty list, =nil=, is also represented by =()=. This
   way of walking down the list for elements is called =cdr=-ing down
   a list, but it's a bit painful. Thus, when we want to process
   lists, we write procedures.

*** Procedures on Lists

    Say we wanted to write a procedure =scale-list= which multiplies
    every element in the list by a certain value. That is, when scale
    list is called on =one-to-four= with value 10, it returns =(10 20
    30 40)=. Here's one possible (recursive) implementation:

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<one-to-four>>
      (define (scale-list l scale)
        (if (null? l)
            nil
            (cons (* scale (car l))
                  (scale-list (cdr l) scale))))

      (scale-list one-to-four 10)
    #+END_SRC

    #+RESULTS:
    : (10 20 30 40)

    =null?= is a predicate which tells us whether the given input is
    the empty list. This will be the case at the end of the list.
    Of course, this is /actually/ a general method for processing all
    values of a list and returning another list, so we write a
    higher-order procedure which applies a procedure to all elements
    of a list and returns the result as a list, called =map=.

    #+NAME: map
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define (map p l)
        (if (null? l)
            nil
            (cons (p (car l))
                  (map p (cdr l)))))
    #+END_SRC

    Now defining =scale-list= in terms of =map=:

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<map>>
      <<one-to-four>>
      (define (scale-list l s)
        (map (lambda (x) (* x s))
             l))

      (scale-list one-to-four 20)
    #+END_SRC

    #+RESULTS:
    : (20 40 60 80)

    We can now square lists:
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<square>>
      <<map>>
      <<one-to-four>>
      (map square one-to-four)
    #+END_SRC

    #+RESULTS:
    : (1 4 9 16)

    Similar to =map=, we define a higher-order procedure =for-each=,
    which, instead of =cons=-ing a list and returning it, simply
    applies to procedure to each element of the list.

    #+NAME: for-each
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      (define (for-each proc l)
        (cond ((null? l) done)
              (else
               (proc (car l))
               (for-each proc (cdr l)))))
    #+END_SRC

** Henderson's Picture Language

   Let's define a language. As usual, we'll concern ourselves with its
   primitives, means of combination, and means of abstraction,
   implementing some of this language in Lisp along the way.


*** Primitives
    This language has only one primitive: "picture", which is a figure
    scaled to fit a rectangle.


*** Means of Combination and Operations

    - Rotate, which rotates a picture and returns it.
    - Flip, which flips the picture across an axis and returns it.
    - Beside, which takes two pictures and a scale, then puts the two
      next to each other, returning a picture.
    - Above, like beside, but above.

    See that the closure property (that an operation on pictures
    returns a picture)[fn:4] allows us to combine these operations/means of
    combination to build complex pictures with ease.

    Let's now implement this part of the language.

*** An Implementation

**** Rectangles

     Three vectors are needed to uniquely identify a rectangle on the
     plane. By convention, we take these to be the bottom left corner
     ("origin"), the bottom right corner ("horizontal") and the top
     left corner ("vertical"). Their positions can be described
     relative to the $(0,0)$ of the display screen. Therefore,
     rectangle is implemented by:
     - Constructor =make-rect=.
     - Selectors =origin=, =horiz=, and =vert=, for the three vectors.

     Note that technically, a rectangle describes a transformation of
     the unit square, where each point in the unit square:
     $$(x,y)\mapsto \mathtt{origin} + x\cdot \mathtt{horiz} + y\cdot
     \mathtt{vert}$$

     We can define a procedure which returns a procedure which maps
     a pair of points $(x,y)$ on the unit square to a given rectangle:

     #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
       (define (coord-map rect)
         (lambda (point)
           (+vect
            (+vect (scale (xcor point)
                          (horiz rect))
                   (scale (ycor point)
                          (vert rect)))
            (origin rect))))
     #+END_SRC

     =coord-map= returns a procedure which given a point will map it
     correctly to =rect=.

**** Pictures

     We can now easily define a procedure which makes a picture:
     #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
       (define (make-picture seglist)
         (lambda (rect)
           (for-each
            (lambda (s)
              (drawline
               ((coord-map rect) (seg-start s))
               ((coord-map rect) (seg-end s))))
            seglist)))
     #+END_SRC

     Well, relatively easily. Let's explain what =make-picture=
     actually does:

     - Takes argument =seglist=, which is a list of line segments
       (pairs of vectors) that the picture is.
     - Returns a procedure which:
       - Takes the argument of a rectangle.
       - For every element in =seglist=:
         - Draws the segment within rectangle, by scaling it correctly
           using =coord-map=.
         - This is done by giving =coord-map= the rectangle to scale
           to.
         - The procedure returned by =coord-map= then scales the
           vectors =(seg-start s)= and =(seg-end s)= to the rectangle.
         - This can now be drawn by =drawline=, since it has as
           arguments two points.

     Note that a picture is /actually/ a procedure which draws itself
     inside a given rectangle, and =make-picture= generates this
     procedure from a =seglist=. Or, in use:

     #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
       (define R (make-rect ;some vectors
                  ))
       (define draw-george-in-rectangle (make-picture ;some seglist
                       ))
       (draw-george-in-rectangle R)
     #+END_SRC

**** Beside

     =beside= needs to draw two pictures on the screen, after scaling
     them correctly (by =a=) and placing them side by side. Thus,
     =beside= returns a picture which takes in an argument =rect=.
     =beside= starts drawing the left picture at =(origin rect),
     (scale a (horiz rect)) (vert rect)= and the right picture at
     =(+vect (origin rect) (scale a (horiz rect))), (scale (- 1 a)
     (horiz rect)), (vert rect)=. This places the two pictures side by
     side and scales them correctly within =rect=. Or, in Lisp,

     #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
       (define (beside p1 p2 a)
         (lambda (rect)
           (p1 (make-rect
                (origin rect)
                (scale a (horiz rect))
                (vert rect)))
           (p2 (make-rect
                (+vect (origin rect)
                       (scale a (horiz rect)))
                (scale (-1 a) (horiz rect))
                (vert rect)))))
     #+END_SRC

**** Rotate-90

     To rotate a picture by 90 degrees counter-clockwise, all we have
     to do is make the =origin= shift to where =horiz= is, then draw
     the new =horiz= and =vert= correctly. With some vector algebra,
     the procedure in Lisp is:

     #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
       (define (rot90 pict)
         (lambda (rect)
           (pict (make-rect
                  (+vect (origin rect)
                         (horiz rect))
                  (vert rect)
                  (scale -1 (horiz rect))))))
     #+END_SRC


*** Means of Abstraction
    See that the picture language is now embedded in Lisp. We can
    write recursive procedures to modify a picture:

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define (right-push pict n a)
        (if (= n 0)
            pict
            (beside pict
                    (right-push pict (dec n) a)
                    a)))
    #+END_SRC

    We can even write a higher order procedure for "pushing":
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define (push comb)
        (lambda (pict n a)
          ((repeated
            (lambda (p)
              (comb pict p a))
            n)
           pict)))

      (define right-push (push beside))
    #+END_SRC

    There's a lot to learn from this example:
    - We're embedding a language inside Lisp. All of Lisp's power is
      available to this small language now: including recursion.
    - There's no difference between a procedure and data: we're
      passing pictures around exactly like data, even though it's
      actually a procedure.
    - We've created a layered system of abstractions on top of Lisp,
      which allows /each layer/ to have all of Lisp's expressive
      power. This is contrasted to a designing such a system bottom-up
      as a tree, which would mean that:
      - Each node does a very specific purpose and is limited in
        complexity because a new feature has to be built ground-up at
        the node.
      - Making a change is near impossible, since there's no higher
        order procedural abstraction. Making a change that affects
        more than one node is a nightmare.

* Lecture 3B: Symbolic Differentiation; Quotation

  We saw that robust system design involves insensitivity to small
  changes, and that embedding a language within Lisp allows this. Let
  us turn to a somewhat similar thread, solving the problem of
  symbolic differentiation in Lisp.

  This problem is somewhat different from /numerical/ differentiation
  of a function like we did for Newton's method, since we actually
  want the expressions we work with to be in an algebraic language.
  Before figuring out how to implement such a thing, let's talk about
  the operation of differentiation itself.

** Differentiation v/s Integration

   Why is it so much easier to differentiate than to integrate?
   Let us look at the basic rules of differentiation:

   $$\frac{\mathrm{d}k}{\mathrm{d}x} = 0$$
   $$\frac{\mathrm{d}x}{\mathrm{d}x} = 1$$
   $$\frac{\mathrm{d}k\cdot a}{\mathrm{d}x} = k\cdot \frac{\mathrm{d}a}{\mathrm{d}x}$$
   $$\frac{\mathrm{d}(a+b)}{\mathrm{d}x} =
   \frac{\mathrm{d}a}{\mathrm{d}x} + \frac{\mathrm{d}b}{\mathrm{d}x}$$
   $$\frac{\mathrm{d}(ab)}{\mathrm{d}x} =  a\cdot
   \frac{\mathrm{d}b}{\mathrm{d}x} +
   \frac{\mathrm{d}a}{\mathrm{d}x}\cdot b$$
   $$\frac{\mathrm{d}x^{n}}{\mathrm{d}x} = nx^{n-1}$$

   See that these rules are reduction rules, in that the derivative of
   some complex thing is the derivative of simpler things joined
   together by basic operations. Such reduction rules are naturally
   recursive in nature. This makes the problem of differentiation very
   easy to solve using simple algorithms.

   On the other hand, implementing an integration system is a much
   harder problem, since such a system would require us to go the
   other way, combining up simpler expressions to make more
   complicated ones, which often involves an intrinsically difficult
   choice to make.

   With these simple recursive rules in mind, let's implement a
   symbolic differentiation system.

** Some Wishful Thinking

   #+NAME: sym-deriv
   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define (deriv expr var)
       (cond ((constant? expr var) 0)
             ((same-var? expr var) 1)
             ((sum? expr)
              (make-sum (deriv (a1 expr) var)
                        (deriv (a2 expr) var)))
             ((product? expr)
              (make-sum
               (make-product (m1 expr)
                             (deriv (m2 expr) var))
               (make-product (deriv (m1 expr) var)
                             (m2 expr))))))
   #+END_SRC


   That's enough rules for now, we can add more later.

   Note that =a1= is a procedure returning the first term of the
   addition $x+y$ (in this case, $x$), and =a2= is a procedure
   returning the second (in this case, $y$). Similar for
   multiplication, =m1= and =m2=.

   All the -=?= procedures are predicates, and should be
   self-explanatory. =make-=, as expected, makes the object with given
   arguments as values and returns it. These are a level of
   abstraction below =deriv=, and involve the actual representation of
   algebraic expressions. Let's figure out how to do this.

** Representing Algebraic Expressions

*** Using Lisp Syntax

    One very simple way to represent expressions is to use Lisp's way:
    expressions that form trees. Consider:

    $$ax^{2} \mapsto \mathtt{(*~a~(*~x~x))}$$ $$bx+c \mapsto \mathtt{(
    \mathtt{+} ~(*~b~x)~c)}$$

    This has the advantage that representing such expression is just a
    list. Moreover, finding out the operation is merely the =car= of
    the list, and the operands are the =cdr=. This effectively
    eliminates our need for parsing algebraic expressions.

*** Representation Implementation

    Let's start defining our procedures.

    #+NAME: atom?
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports none
      (define (atom? x)
        (and (not (null? x))
             (not (pair? x))))
    #+END_SRC


    #+NAME: deriv-preds
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define (constant? expr var)
        (and (atom? expr)
             (not (eq? expr var))))

      (define (same-var? expr var)
        (and (atom? expr)
             (eq? expr var)))

      (define (sum? expr)
        (and (not (atom? expr))
             (eq? (car expr) '+)))

      (define (product? expr)
        (and (not (atom? expr))
             (eq? (car expr) '*)))
    #+END_SRC

    We see a new form here: ='+= and ='*=. This is called "quoting".
    Why do we need to do this? Consider:

    #+begin_verse
    "Say your name!"
    "Susanne."
    "Say 'your name'!"
    "Your name."
    #+end_verse

    To differentiate the cases where we mean /literally/ say "your
    name" and the case where we actually ask what "your name" /is/, we
    use quotation marks in English. Similarly, quoting a symbol in
    Lisp tells the interpreter to check /literally/ for =(car expr)=
    to be the symbol =+= and not the procedure =+=.

    Quotation is actually quite a complicated thing. Following the
    principle of substituting equals for equals, consider:

    #+begin_verse
    "Chicago" has seven letters.
    Chicago is the biggest city in Illinois.
    "The biggest city in Illinois" has seven letters.
    #+end_verse

    The first two statements are true, and quotation marks are used
    correctly in the first to show that we're talking about Chicago
    the word and not Chicago the city. However, the third statement is
    wrong entirely (although it is the result of changing equals for
    equals), because the phrase "The biggest city in Illinois" does
    not have seven letters.
    That is, we cannot substitute equals for equals in referentially
    opaque contexts.

    Note that the ='= symbol breaks the neat pattern of Lisp where all
    expressions are delimited by =()=. To resolve this, we introduce
    the special form =(quote +)=, which does the exactly same thing as
    ='+=.

    Now defining the constructors:

    #+NAME: deriv-makes
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define (make-sum a1 a2)
        (list '+ a1 a2))

      (define (make-product m1 m2)
        (list '* m1 m2))
    #+END_SRC


    Finally, we must define the selectors:

    #+NAME: deriv-cadr
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define a1 cadr)
      (define a2 caddr)

      (define m1 cadr)
      (define m2 caddr)
    #+END_SRC


    =cadr= is the =car= of the =cdr= and =caddr= is the =car= of the
    =cdr= of the =cdr=. These are forms provided for convenience while
    programming, since list processing a big part of Lisp.[fn:5]

    Let's try it out:

    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<atom?>>
      <<deriv-preds>>
      <<deriv-makes>>
      <<deriv-cadr>>
      <<sym-deriv>>

      (deriv '(+ (* a (* x x)) (+ (* b x) c)) 'x)
      (deriv '(+ (* a (* x x)) (+ (* b x) c)) 'a)
      (deriv '(+ (* a (* x x)) (+ (* b x) c)) 'b)
      (deriv '(+ (* a (* x x)) (+ (* b x) c)) 'c)
    #+END_SRC

    #+RESULTS:
    : (+ (+ (* a (+ (* x 1) (* 1 x))) (* 0 (* x x))) (+ (+ (* b 1) (* 0 x)) 0))
    : (+ (+ (* a (+ (* x 0) (* 0 x))) (* 1 (* x x))) (+ (+ (* b 0) (* 0 x)) 0))
    : (+ (+ (* a (+ (* x 0) (* 0 x))) (* 0 (* x x))) (+ (+ (* b 0) (* 1 x)) 0))
    : (+ (+ (* a (+ (* x 0) (* 0 x))) (* 0 (* x x))) (+ (+ (* b 0) (* 0 x)) 1))

    Note the recursive nature of =deriv=: the process creates results
    with the same shape even when we differentiate with respect to
    some other variable. This is because the recursion only ends when
    an expression is decomposed to either =same-var?= or =constant?=.

*** Simplification

    However, these results are ugly, and we know why --- there's no
    simplification. Technically, it's correct:

    \begin{align*}
    &a(1x+1x) + 0x^{2} + b + 0x + 0\\
    =& 2ax + b
    \end{align*}

    Note that we've faced this same problem before with fractions, and
    recall that the solution was to change the constructors so that
    they'd simplify while creating the lists. Consider:

    #+NAME: deriv-makes-2
    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
      (define (make-sum a1 a2)
        (cond ((and (number? a1)
                    (number? a2))
               (+ a1 a2))
              ((and (number? a1)
                    (= a1 0))
               a2)
               ((and (number? a2)
                    (= a2 0))
                a1)
               (else
                (list '+ a1 a2))))

      (define (make-product m1 m2)
        (cond ((and (number? m1)
                    (number? m2))
               (* m1 m2))
              ((and (number? m1)
                    (= m1 0))
               0)
               ((and (number? m2)
                    (= m2 0))
                0)
               ((and (number? m1)
                     (= m1 1))
                m2)
               ((and (number? m2)
                     (= m2 1))
                m1)
               (else
                (list '+ m1 m2))))
    #+END_SRC

    Now trying =deriv=:


    #+BEGIN_SRC racket :lang sicp :eval no-export :exports both :noweb strip-export
      <<atom?>>
      <<deriv-preds>>
      <<deriv-makes-2>>
      <<deriv-cadr>>
      <<sym-deriv>>

      (deriv '(+ (* a (* x x)) (+ (* b x) c)) 'x)
      (deriv '(+ (* a (* x x)) (+ (* b x) c)) 'a)
      (deriv '(+ (* a (* x x)) (+ (* b x) c)) 'b)
      (deriv '(+ (* a (* x x)) (+ (* b x) c)) 'c)
    #+END_SRC

    #+RESULTS:
    : (+ (+ a (+ x x)) b)
    : (* x x)
    : x
    : 1

    Excellent, these are much better. Note, of course, that we could
    simplify the first one further, but, in general, algebraic
    simplification is a painful problem, since the definition of
    simplest form varies with application. However, this is good
    enough.

** On Abstract Syntax

   Note that the syntax we used was abstract in the sense that it had
   its own rules and grammar. However, since it followed Lisp's syntax
   closely, we needed quotation to allow full expression.

   This is a powerful paradigm: not only can we use meta-linguistic
   abstraction to create languages embedded within Lisp, but we can
   also use Lisp to interpret any syntax. We'll see more of this in
   the future.

* Lecture 4A: Pattern Matching and Rule-Based Substitution

  It's a funny technique we used last time, converting the rules of
  differentiation to Lisp. In fact, if we wanted to explain (say) the
  rules of algebra to the computer, we'd have to again create a
  similar program which converts the rules of algebra to Lisp.

  See that there's a higher-order idea here, of explaining rules to
  Lisp and having the rules applied to an input expression to
  "simplify" it. Our style of writing a rule-based substitution
  program is:

  Rules \rightarrow conditional \rightarrow dispatch

  That is, we try the rules on the given expression. If there's a
  match, we "dispatch" the result to substitute. Now, in general, the
  application of a rule is:

  - Compare LHS of rule to input expression.
  - If match, RHS with substituted values is replacement.

  Or, diagrammatically:

  \[\begin{tikzcd} \mathrm{Pattern} \arrow{r}{\mathrm{Rule}}
  \arrow[swap]{d}{\mathrm{Matched}} & \mathrm{Skeleton}
  \arrow{d}{\mathrm{Instantiation}} \\ \mathrm{Expression_{Src}}
  \arrow[mapsto]{r} & \mathrm{Expression_{Target}} \end{tikzcd} \]

  Let us now build a simple language to express these rules, which can
  then be pattern matched, skeletons created, then instantiated.

** Rule Language

   Here's a sample bit of what we want the rule language to look like:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define deriv-rules
       '(
         ((dd (?c c) (? v)) 0)
         ((dd (?v v) (? v)) 1)
         ((dd (?v u) (? v)) 0)

         ((dd (+ (? x1) (? x2)) (? v))
          (+ (dd (: x1) (: v))
             (dd (: x2) (: v))))

         ((dd (* (? x1) (? x2)) (? v))
          (+ (* (: x1) (dd (: x2) (: v)))
             (* (: x2) (dd (: x1) (: v)))))
         ; ...
         ))
   #+END_SRC

   It is worth explaining what this syntax means exactly, because
   eventually, we want to parse it.

   The rules are a list of pairs. The =car= of each pair is the
   pattern to match (rule LHS), and the =cdr= is the skeleton
   substitution expression (rule RHS).

*** Pattern Matching

    The idea of the LHS language is to provide a framework where
    certain constructs can be matched and possibly named. These names
    will then be passed to the skeleton instantiator.[fn:6]

    #+ATTR_LATEX: :booktabs t
    | Syntax    | Meaning                                                                     |
    |-----------+-----------------------------------------------------------------------------|
    | =foo=     | Matches itself literally.                                                   |
    | =(f a b)= | Matches every 3-list whose =car= is =f=, =cadr= is =a=, and =caddr= is =b=. |
    | =(? x)=   | Matches any expression, and calls it =x=.                                   |
    | =(?c x)=  | Matches an expression which is a constant, and calls it =x=.                |
    | =(?v x)=  | Matches an expression which is a variable, and calls it =x=.                |


*** Skeleton and Instantiation
    The RHS language provides a skeleton wherein values provided by
    the LHS language can be substituted.

    #+ATTR_LATEX: :booktabs t
    | Syntax    | Meaning                                                       |
    |-----------+---------------------------------------------------------------|
    | =foo=     | Instantiates =foo=.                                           |
    | =(f a b)= | Instantiates each element of the list and returns a list.     |
    | =(: x)=   | Instantiate the value of =x= provided by the pattern matcher. |

** Sample Usage

   We expect to use this program by calling a procedure called
   =simplifier=, to which we provide the list of rules. The procedure
   should return another procedure, which is able to apply the rules
   to a given input expression. Or, in Lisp:

   #+BEGIN_SRC racket :lang sicp :eval no-export :exports both
     (define dsimp
       (simplifier deriv-rules))

     (dsimp '(dd (+ x y) x))
   #+END_SRC

   #+begin_example
    (+ 1 0)
   #+end_example

** Implementation



































































































* Footnotes

[fn:1] =let= is a Lisp primitive which takes as its first argument a
list of definitions, and second input a list of applications that may
use these definitions. The trick is that these definitions are only
valid in the body (second argument) of =let=, effectively creating a
local namespace.

[fn:2] For an operation defined on members of a set, the result of
that operation is a member of the set. For instance, addition on
natural numbers.

[fn:3] Note that Lisp actually implements pairs using "real" data
structures, since using procedures this way is less efficient.

[fn:4] $p \otimes p = p$

[fn:5] LISP actually stands for LISt Processing.

[fn:6] We use "initiate" and "substitute" interchangeably to mean
swapping out expressions in the skeleton provided by the RHS of the
rules.
